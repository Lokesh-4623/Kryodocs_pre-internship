# -*- coding: utf-8 -*-
"""Week3_assignment.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i9iiwJwOpf3M4se04k3BxB3biPT4yLS6
"""

#Given a list of words, return a dictionary where the keys are the words and the values are the number of times the word appears in the list.
my_list=["hello","hi","hi","tall","hi","hi","hello","tall","Hello"]
k={}
for items in my_list:
   if(items in k):
     k[items]+=1
   else:
     k[items]=1  
print(k)

#Given a list of words, return a dictionary where the keys are the words and the values are the number of letters in the word.
my_list=["hello","hi","hi","tall","hi","hi","hello","tall","Hello"]
k={}
for items in my_list:
   if(items not in k):
      k[items]=len(items)
print(k)

#Given a list of words, return a dictionary where the keys are the words and the values are the number of vowels in the word.
my_list=["hello","hi","hi","tall","hi","hi","hello","tall","HEllo"]
k={}
for items in my_list:
   if(items not in k):
      c=0
      for i in items:
        if i in ['a','e','i','o','u','A','E','I','O','U']:
          c+=1
      k[items]=c    
print(k)

#Redo one with all the punctuation removed and all words lower cased.
import string
my_list=["Hello","Loke","kite","loke","hel!lo","Lo,ke.","parrot","pInk"]
count_dict={}
for i in my_list:
   i=i.lower()
   i=i.translate(str.maketrans('','',string.punctuation))
   if i in count_dict:
      count_dict[i]+=1
   else:
      count_dict[i]=1   
print(count_dict)

#Given some text (containing multiple sentences) find the frequency of bigrams (pairs of words) and trigrams (triple words)
import nltk
from nltk import ngrams
sample_str="hello all everyone hi for hello all everyone hi for tens"

my_list=sample_str.split()
print(my_list)
bigram=ngrams(my_list,2)
frequency = nltk.FreqDist(bigram)
print("BIGRAMS:")
for key,value in frequency.items():
    print(key,value)
print("TRIGRAMS:")
trigram=ngrams(my_list,3)
frequency = nltk.FreqDist(trigram)
for key,value in frequency.items():
    print(key,value)

#Write a generic function to create n grams (where n can be 1 to 5).
y_list=sample_str.split()
def n_gram(word,n):
 
  bigram=ngrams(word,n)
  frequency = nltk.FreqDist(bigram)
  
  for key,value in frequency.items():
    print(key,value)

n_gram(y_list,4)

#Given two text files, find all teh common words, bigrams and trigrams (using the n-gram function)
f1=open("data1.txt",'r') 
f2=open("data2.txt","r")
d1=list([line.split() for line in f1])
d2=list([line.split() for line in f2])
my_list2=[]
my_list3=[]
common_list=[]
for i in d1:
  for j in i:
    my_list2.append(j)
print("The elements present in first file:",my_list2)    
for i in d2:
  for j in i:
    my_list3.append(j) 
print("The elements present in second file:",my_list3)       
for i in my_list2:
  for j in my_list3:
    if i==j:
      common_list.append(i)
      break      
print("Common elements in first file:",common_list)      
for i in my_list3:
  for j in common_list:
    if i==j:
      common_list.append(i)
      break      

print("Common elements in second file:",my_list2)
print(my_list3)
print("Common List elements in both the file:",common_list)
print("bigram:")    
n_gram(common_list,2)
print("trigram:")
n_gram(common_list,3)