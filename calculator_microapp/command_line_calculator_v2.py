# -*- coding: utf-8 -*-
"""command_line_calculator_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dA7DTZ0Am-aSrUkNB9m7S8-0tBux3v0K
"""

def prec(c):
  if(c=='*' or c=='/'):
     return 2
  elif(c=='+' or c=='-'):  
     return 1  
  else:
     return -1
def calculate(expression):     
  stack=[]
  res=[]
  r=0
  i=0
  stack.append('~')
  while i<len(expression):
     if(expression[i].isnumeric()): 
       while((i<len(expression))and(expression[i].isnumeric())):
         r=int(expression[i])+r*10
         i=i+1
       res.append(r)
       r=0
       if(i==len(expression)):
           break
     if(expression[i]=='('):
           stack.append(expression[i])
     elif(expression[i]==')'):
            c=stack.pop()
            while(c!='('):
                res.append(c)
                c=stack.pop()  
     else: 
          c=stack.pop()
          while((c!='~' and (prec(expression[i])<=prec(c)))):
              res.append(c)
              c=stack.pop()  
          stack.append(c)     
          stack.append(expression[i])
     i=i+1
  c=stack.pop()                  
  while(c!='~'):
    res.append(c)
    c=stack.pop()
#print(res)    

  stack1=[]
  symbol=['+','-','*','/']
  for i in res:
   if(not(i in symbol)):
     stack1.append(i)
   else:
     val1=stack1.pop()
     val2=stack1.pop()
     if i=='+':
         stack1.append(val2+val1)
     elif i=='-':
         stack1.append(val2-val1)
     elif i=='*':
         stack1.append(val2*val1)
     elif i=='/':
          stack1.append(val2/val1)
  c=stack1.pop()
  
  if(c!='~'):
    return c
  else:      
    return "INVALID INPUT..."          
#e=input("ENTER AN EXPRESSION:")
#print("THE RESULT IS:",calculate(e))